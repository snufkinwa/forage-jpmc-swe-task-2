From 9041b739704fe57d3f802e12e4daf7da897d50fd Mon Sep 17 00:00:00 2001
From: Janay Harris <jha2972@wgu.edu>
Date: Wed, 10 Jul 2024 01:00:15 -0500
Subject: [PATCH] Second attempt

---
 src/App.tsx   | 134 +++++++++++++++++++++++++-------------------------
 src/Graph.tsx | 109 +++++++++++++++++++---------------------
 2 files changed, 119 insertions(+), 124 deletions(-)

diff --git a/src/App.tsx b/src/App.tsx
index 07eaa81..439fe6e 100755
--- a/src/App.tsx
+++ b/src/App.tsx
@@ -1,14 +1,15 @@
-import React, { Component } from 'react';
-import DataStreamer, { ServerRespond } from './DataStreamer';
+import React, {Component} from 'react';
+import DataStreamer, {ServerRespond} from './DataStreamer';
 import Graph from './Graph';
 import './App.css';
+import {setInterval} from "timers";
 
 /**
  * State declaration for <App />
  */
 interface IState {
-  data: ServerRespond[],
-  showGraph: boolean,
+    data: ServerRespond[],
+    showGraph: boolean
 }
 
 /**
@@ -16,72 +17,73 @@ interface IState {
  * It renders title, button and Graph react element.
  */
 class App extends Component<{}, IState> {
-  constructor(props: {}) {
-    super(props);
+    constructor(props: {}) {
+        super(props);
 
-    this.state = {
-      // data saves the server responds.
-      // We use this state to parse data down to the child element (Graph) as element property
-      data: [],
-      showGraph: false,
-    };
-  }
+        this.state = {
+            // data saves the server responds.
+            // We use this state to parse data down to the child element (Graph) as element property
+            data: [],
+            showGraph: false
+        };
+    }
 
-  /**
-   * Render Graph react component with state.data parse as property data
-   */
-  renderGraph() {
-    if(this.state.showGraph){
-    return (<Graph data={this.state.data}/>)
+    /**
+     * Render Graph react component with state.data parse as property data
+     */
+    renderGraph() {
+        if (this.state.showGraph) {
+            return (<Graph data={this.state.data}/>)
+        }
     }
-  }
 
-  /**
-   * Get new data from server and update the state with the new data
-   */
-  getDataFromServer() {
-    let x = 0;
-    const interval = setInterval(() => {
-      DataStreamer.getData((serverResponds: ServerRespond[]) => {
-        // Append new data to existing data
-        this.setState(prevState => ({
-          data: [...prevState.data, ...serverResponds],
-          showGraph: true
-        }));
-      });
-      x++;
-      if (x > 1000) {
-        clearInterval(interval);
-      }
-    }, 100);
-  }
+    /**
+     * Get new data from server and update the state with the new data
+     */
+    getDataFromServer() {
+        let x = 0;
+        const interval = setInterval(() => {
+            DataStreamer.getData((serverResponds: ServerRespond[]) => {
+                this.setState({
+                    data: serverResponds,
+                    showGraph: true
+                });
+            });
+            x++;
+            if (x > 1000) {
+                clearInterval(interval);
+            }
+        }, 100);
+    }
 
-  /**
-   * Render the App react component
-   */
-  render() {
-    return (
-      <div className="App">
-        <header className="App-header">
-          Bank & Merge Co Task 2
-        </header>
-        <div className="App-content">
-          <button className="btn btn-primary Stream-button"
-            // when button is click, our react app tries to request
-            // new data from the server.
-            // As part of your task, update the getDataFromServer() function
-            // to keep requesting the data every 100ms until the app is closed
-            // or the server does not return anymore data.
-            onClick={() => {this.getDataFromServer()}}>
-            Start Streaming Data
-          </button>
-          <div className="Graph">
-            {this.renderGraph()}
-          </div>
-        </div>
-      </div>
-    )
-  }
+    /**
+     * Render the App react component
+     */
+    render() {
+        return (
+            <div className="App">
+                <header className="App-header">
+                    Bank & Merge Co Task 2
+                </header>
+                <div className="App-content">
+                    <button className="btn btn-primary Stream-button"
+                        // when button is click, our react app tries to request
+                        // new data from the server.
+                        // As part of your task, update the getDataFromServer() function
+                        // to keep requesting the data every 100ms until the app is closed
+                        // or the server does not return anymore data.
+                            onClick={() => {
+                                this.getDataFromServer()
+                            }}>
+                        Start Streaming Data
+                    </button>
+                    <div className="Graph">
+                        {this.renderGraph()}
+                    </div>
+                </div>
+            </div>
+        )
+    }
 }
 
-export default App;
+export default App;
\ No newline at end of file
diff --git a/src/Graph.tsx b/src/Graph.tsx
index a68ffb6..6cf790d 100644
--- a/src/Graph.tsx
+++ b/src/Graph.tsx
@@ -1,21 +1,21 @@
-import React, { Component } from 'react';
-import { Table } from '@finos/perspective';
-import { ServerRespond } from './DataStreamer';
+import React, {Component} from 'react';
+import {Table} from '@finos/perspective';
+import {ServerRespond} from './DataStreamer';
 import './Graph.css';
 
 /**
  * Props declaration for <Graph />
  */
 interface IProps {
-  data: ServerRespond[],
+    data: ServerRespond[],
 }
 
 /**
  * Perspective library adds load to HTMLElement prototype.
  * This interface acts as a wrapper for Typescript compiler.
  */
-interface PerspectiveViewerElement extends HTMLElement{
-  load: (table: Table) => void,
+interface PerspectiveViewerElement extends HTMLElement {
+    load: (table: Table) => void,
 }
 
 /**
@@ -23,65 +23,58 @@ interface PerspectiveViewerElement extends HTMLElement{
  * parsed from its parent through data property.
  */
 class Graph extends Component<IProps, {}> {
-  // Perspective table
-  table: Table | undefined;
+    // Perspective table
+    table: Table | undefined;
 
-  render() {
-    return React.createElement('perspective-viewer');
-  }
-
-  componentDidMount() {
-    // Get element to attach the table from the DOM.
-    const elem = document.getElementsByTagName('perspective-viewer')[0] as unknown as PerspectiveViewerElement;
+    render() {
+        return React.createElement('perspective-viewer');
+    }
 
-    const schema = {
-      stock: 'string',
-      top_ask_price: 'float',
-      top_bid_price: 'float',
-      timestamp: 'date',
-    };
+    componentDidMount() {
+        // Get element to attach the table from the DOM.
+        const elem = document.getElementsByTagName('perspective-viewer')[0] as unknown as PerspectiveViewerElement;
 
-    if (window.perspective && window.perspective.worker()) {
-      this.table = window.perspective.worker().table(schema);
-    }
-    if (this.table) {
-      // Load the `table` in the `<perspective-viewer>` DOM reference.
+        const schema = {
+            stock: 'string',
+            top_ask_price: 'float',
+            top_bid_price: 'float',
+            timestamp: 'date',
+        };
 
-      // Add more Perspective configurations here.
-      elem.load(this.table);
+        if (window.perspective && window.perspective.worker()) {
+            this.table = window.perspective.worker().table(schema);
+        }
+        if (this.table) {
+            // Load the `table` in the `<perspective-viewer>` DOM reference.
 
-      elem.setAttribute('view', 'y_line');
-      elem.setAttribute('column-pivots', '["stock"]');
-      elem.setAttribute('row-pivots', '["timestamp"]');
-      elem.setAttribute('columns', '["top_ask_price", "top_bid_price"]');
-      elem.setAttribute('aggregates', JSON.stringify({
-        stock: 'distinct count',
-        top_ask_price: 'avg',
-        top_bid_price: 'avg',
-        timestamp: 'distinct count',
-      }));
+            // Add more Perspective configurations here.
+            elem.load(this.table);
+            elem.setAttribute("view", "y_line");
+            elem.setAttribute("column-pivots", '["stock"]');
+            elem.setAttribute("row_pivots", '["timestamp"]');
+            elem.setAttribute("columns", '["top_ask_price"]');
+            elem.setAttribute("aggregates",
+                `{"stock":"distinct count", "top_ask_price":"avg", "top_bid_price":"avg", "timestamp":"distinct count"}`
+            );
+        }
     }
-  }
 
-  componentDidUpdate() {
-    // Everytime the data props is updated, insert the data into Perspective table
-    if (this.table) {
-      
-      // As part of the task, you need to fix the way we update the data props to
-      // avoid inserting duplicated entries into Perspective table again.
-      this.props.data.filter(el => el.stock === 'ABC' || el.stock === 'DEF');
-      this.table.update(this.props.data.map((el: any) => {
-        // Format the data from ServerRespond to the schema
-        
-        return {
-          stock: el.stock,
-          top_ask_price: el.top_ask && el.top_ask.price || 0,
-          top_bid_price: el.top_bid && el.top_bid.price || 0,
-          timestamp: el.timestamp,
-        };
-      }));
+    componentDidUpdate() {
+        // Everytime the data props is updated, insert the data into Perspective table
+        if (this.table) {
+            // As part of the task, you need to fix the way we update the data props to
+            // avoid inserting duplicated entries into Perspective table again.
+            this.table.update(this.props.data.map((el: any) => {
+                // Format the data from ServerRespond to the schema
+                return {
+                    stock: el.stock,
+                    top_ask_price: el.top_ask && el.top_ask.price || 0,
+                    top_bid_price: el.top_bid && el.top_bid.price || 0,
+                    timestamp: el.timestamp,
+                };
+            }));
+        }
     }
-  }
 }
 
-export default Graph;
+export default Graph;
\ No newline at end of file
-- 
2.39.3 (Apple Git-146)

